var FurryECS=function(e){"use strict";class t{classes=[t];EID;static nextEID=0;static recycledEID=new Set;constructor(){this.EID=t.getNextEID()}static recycleEID(e){this.recycledEID.add(e)}static reset(){this.nextEID=0,this.recycledEID.clear()}static getNextEID(){if(this.recycledEID.size){const e=this.recycledEID.values().next().value;return e===this.nextEID&&this.nextEID++,this.recycledEID.delete(e),e}return this.nextEID++}}const s=1e3;var r,a,i;!function(e){e[e.NUMBER=0]="NUMBER",e[e.ARRAY=1]="ARRAY"}(r||(r={})),function(e){e[e.ADDED=0]="ADDED",e[e.ACTIVE=1]="ACTIVE",e[e.REMOVED=2]="REMOVED"}(a||(a={})),function(e){e[e.NUMBER=0]="NUMBER",e[e.STRING=1]="STRING",e[e.BOOLEAN=2]="BOOLEAN",e[e.ARRAY=3]="ARRAY",e[e.MAP=4]="MAP",e[e.SET=5]="SET",e[e.OBJECT=6]="OBJECT"}(i||(i={}));var n=Object.freeze({__proto__:null,get ComponentType(){return r},DEFAULT_WORLD_SIZE:s,get Serializable(){return i},get Status(){return a}});class o{hasChanged;data;deferredData;constructor(){this.data=new Map,this.deferredData={added:new Set,removed:new Set},this.hasChanged=!1}addData(e,t=!1){return this.deferredData.removed.has(e)?(this.deferredData.removed.delete(e),!0):!this.data.has(e)&&!this.deferredData.added.has(e)&&(t?this.data.set(e,a.ACTIVE):this.deferredData.added.add(e),!0)}removeData(e,t=!1){return this.deferredData.added.has(e)?(this.deferredData.added.delete(e),!0):!(!this.data.has(e)||this.deferredData.removed.has(e))&&(t?this.data.delete(e):this.deferredData.removed.add(e),!0)}hasData(e){return this.data.has(e)}hasDeferredData(e){return this.deferredData.added.has(e)||this.deferredData.removed.has(e)}commitChanges(e=!1){this.hasChanged&&(this.hasChanged=!1),e&&this.applyDeferredChanges(),this.cleanPreviousChanges(),e||this.applyDeferredChanges()}destroy(){this.data.clear(),this.cleanDeferredChanges()}getDataStatus(e){return this.data.get(e)}keys(){return this.data.keys()}values(){return this.data.values()}length(e){return this.data.size+(e?this.deferredData.added.size:0)}*[Symbol.iterator](){for(const e of this.data)yield e}applyDeferredChanges(){for(const e of this.deferredData.added)this.data.set(e,a.ADDED),this.hasChanged=!0;for(const e of this.deferredData.removed)this.data.set(e,a.REMOVED),this.hasChanged=!0;this.cleanDeferredChanges()}cleanPreviousChanges(){for(const[e,t]of this.data)t===a.ADDED?this.data.set(e,a.ACTIVE):t===a.REMOVED&&this.data.delete(e)}cleanDeferredChanges(){this.deferredData.added.clear(),this.deferredData.removed.clear()}}class c{classes=[c,o];entities;size;properties;constructor(e,t){this.size=t||s,e??={},this.properties=this.createProperties(e),this.entities=new o}get props(){return this.properties}getProp(e,t){return this.properties.get(e)?.get(t)}setProp(e,t,s){const r=this.properties.get(e);return!!r&&(!(r.size>=this.size)&&(r.set(t,s),!0))}attachEntity(e){return!(this.entities.length(!0)>=this.size)&&this.entities.addData(e)}detachEntity(e){return this.entities.removeData(e)}destroy(){this.entities.destroy(),this.properties.forEach((e=>e.clear()))}createProperties(e){return Object.keys(e).reduce(((e,t)=>(e.set(t,new Map),e)),new Map)}}class d{start;update;destroy;constructor(e){this.start=e?.start,this.update=e?.update,this.destroy=e?.destroy}}class h{includeComponents;excludeComponents;entities;updated;constructor(e){this.includeComponents=new Set(e?.include||[]),this.excludeComponents=new Set(e?.exclude||[]),this.entities=new Map,this.updated=!1}exec(e,t){return this.updated=0!==this.entities.size&&!this.hasChanges(),this.updated?this.cleanChanges():this.entities=this.filterEntitiesByComponent(e),void 0!==t?this.filterEntitiesByStatus(t):new Array(...this.entities.keys())}hasChanges(){for(const e of[...this.includeComponents.keys(),...this.excludeComponents.keys()])if(e.entities.hasChanged)return!0;return!1}cleanChanges(){for(const[e,t]of this.entities)t===a.ADDED?this.entities.set(e,a.ACTIVE):t===a.REMOVED&&this.entities.delete(e)}filterEntitiesByComponent(e){const t=new Map;for(const s of this.includeComponents)if(e.components.hasData(s))for(const[e,r]of s.entities)t.set(e,r);for(const s of this.excludeComponents)if(e.components.hasData(s))for(const e of s.entities.keys())t.delete(e);return t}filterEntitiesByStatus(e){const t=new Array;for(const[s,r]of this.entities)r===e&&t.push(s);return t}}class u{serializeHandler;deserializeHandler;classes;constructor(e){this.serializeHandler=e?.serializeHandler,this.deserializeHandler=e?.deserializeHandler,this.classes=[]}serialize(e){if(e instanceof u)return;const t=this.serializeHandler?.(e,this);if(void 0!==t)return t;if(Array.isArray(e))return this.serializeArray(e);if(e instanceof Map)return this.serializeMap(e);if(e instanceof Set)return this.serializeSet(e);if(null!==e&&"object"==typeof e&&!Array.isArray(e))return this.serializeObject(e);switch(typeof e){case"number":return{type:i.NUMBER,name:e.constructor.name,value:e};case"string":return{type:i.STRING,name:e.constructor.name,value:e};case"boolean":return{type:i.BOOLEAN,name:e.constructor.name,value:e};default:return}}deserialize(e){const t=this.deserializeHandler?.(e,this);if(void 0!==t)return t;switch(e.type){case i.ARRAY:return this.deserializeArray(e);case i.MAP:return this.deserializeMap(e);case i.SET:return this.deserializeSet(e);case i.OBJECT:return this.deserializeObject(e);case i.NUMBER:case i.STRING:case i.BOOLEAN:return e.value;default:return}}serializeArray(e){const t=new Array;for(const s of e){const e=this.serialize(s);e&&t.push(e)}return{type:i.ARRAY,name:e.constructor.name,value:t}}serializeMap(e){const t=new Array;for(const[s,r]of e){const e=this.serialize(s),a=this.serialize(r);e&&a&&t.push([e,a])}return{type:i.MAP,name:e.constructor.name,value:t}}serializeSet(e){const t=new Array;for(const s of e){const e=this.serialize(s);e&&t.push(e)}return{type:i.SET,name:e.constructor.name,value:t}}serializeObject(e){const t=new Array;if(e.classes)for(const t of e.classes)this.classes.push(t);for(const[s,r]of Object.entries(e)){if("classes"===s)continue;const e=this.serialize(r);e&&t.push([s,e])}return{type:i.OBJECT,name:e.constructor.name,value:t}}deserializeArray(e){const t=new Array;for(const s of e.value){const e=this.deserialize(s);void 0!==e&&t.push(e)}return t}deserializeMap(e){const t=new Map;for(const[s,r]of e.value){const e=this.deserialize(s),a=this.deserialize(r);void 0!==e&&void 0!==a&&t.set(e,a)}return t}deserializeSet(e){const t=new Set;for(const s of e.value){const e=this.deserialize(s);void 0!==e&&t.add(e)}return t}deserializeObject(e){const t={};for(const[s,r]of e.value){const e=this.deserialize(r);void 0!==e&&(t[s]=e)}for(const s of this.classes)if(s.name===e.name)return Object.assign(Object.create(s.prototype),t);return t}}class l{classes=[l,o];entities;components;systems;size;constructor(e){this.entities=new o,this.components=new o,this.systems=new o,this.size=e?.size||s}addEntity(e){return!(this.entities.length(!0)>=this.size)&&this.entities.addData(e)}addComponent(e){return!(this.components.length(!0)>=this.size)&&this.components.addData(e)}addSystem(e){return!(this.systems.length(!0)>=this.size)&&(e.start?.(this),this.systems.addData(e))}removeEntity(e){const t=this.entities.removeData(e);if(t)for(const t of this.components.keys())t.entities.removeData(e);return t}removeComponent(e){return this.components.removeData(e)}removeSystem(e){return e.destroy?.(this),this.systems.removeData(e)}update(e,t,s){this.applyChanges();for(const[r,i]of this.systems)i===a.ACTIVE&&r.update?.(this,e,t,s)}destroy(){this.entities.destroy(),this.components.destroy(),this.systems.destroy()}applyChanges(){this.entities.commitChanges(),this.components.commitChanges();for(const e of this.components.keys())e.entities.commitChanges();this.systems.commitChanges()}}class f{static createWorld(){return new l}static createEntity(){return new t}static defineComponent(e,t){return new c(e,t)}static defineSystem(e){return new d(e)}static defineQuery(e){return new h(e)}static defineSerializer(e){return new u(e)}static addEntity(e,t){const s=Array.isArray(e)?e:[e],r=Array.isArray(t)?t:[t],a=new Array;for(const e of s)for(const t of r)a.push(e.addEntity(t));return a}static addComponent(e,t){const s=Array.isArray(e)?e:[e],r=Array.isArray(t)?t:[t],a=new Array;for(const e of s)for(const t of r)a.push(e.addComponent(t));return a}static addSystem(e,t){const s=Array.isArray(e)?e:[e],r=Array.isArray(t)?t:[t],a=new Array;for(const e of s)for(const t of r)a.push(e.addSystem(t));return a}static removeEntity(e,t){const s=Array.isArray(e)?e:[e],r=Array.isArray(t)?t:[t],a=new Array;for(const e of s)for(const t of r)a.push(e.removeEntity(t));return a}static removeComponent(e,t){const s=Array.isArray(e)?e:[e],r=Array.isArray(t)?t:[t],a=new Array;for(const e of s)for(const t of r)a.push(e.removeComponent(t));return a}static removeSystem(e,t){const s=Array.isArray(e)?e:[e],r=Array.isArray(t)?t:[t],a=new Array;for(const e of s)for(const t of r)a.push(e.removeSystem(t));return a}static attachEntity(e,t){const s=Array.isArray(e)?e:[e],r=Array.isArray(t)?t:[t],a=new Array;for(const e of s)for(const t of r)a.push(e.attachEntity(t));return a}static detachEntity(e,t){const s=Array.isArray(e)?e:[e],r=Array.isArray(t)?t:[t],a=new Array;for(const e of s)for(const t of r)a.push(e.detachEntity(t));return a}static update(e,t,s,r){const a=Array.isArray(e)?e:[e];for(const e of a)e.update(t,s,r)}static destroyWorld(e){const t=Array.isArray(e)?e:[e];for(const e of t)e.destroy()}}return e.Component=c,e.Constants=n,e.ECS=f,e.Entity=t,e.Query=h,e.Serializer=u,e.Storage=o,e.System=d,e.World=l,e.default=f,Object.defineProperty(e,"__esModule",{value:!0}),e}({});

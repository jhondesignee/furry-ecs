class e{EID;static nextEID=0;static recycledEID=new Set;constructor(){this.EID=e.getNextEID()}static recycleEID(e){this.recycledEID.add(e)}static getNextEID(){if(this.recycledEID.size){const e=this.recycledEID.values().next().value;return e===this.nextEID&&this.nextEID++,this.recycledEID.delete(e),e}return this.nextEID++}}var t,s;!function(e){e[e.NUMBER=0]="NUMBER",e[e.ARRAY=1]="ARRAY"}(t||(t={})),function(e){e[e.ADDED=0]="ADDED",e[e.ACTIVE=1]="ACTIVE",e[e.REMOVED=2]="REMOVED"}(s||(s={}));var n=Object.freeze({__proto__:null,get ComponentType(){return t},get QueryModifier(){return s}});class o{props;constructor(e){this.props=o.createProperties(e)}static createProperties(e){return Object.fromEntries(Object.entries(e).map((([e,s])=>{switch(s){case t.NUMBER:case t.ARRAY:return[e,new Array]}})))}}class i{onStart;constructor(e){this.onStart=e}}class r{includeComponents;excludeComponents;entities;constructor(e){this.includeComponents=new Set(e.include),this.excludeComponents=new Set(e.exclude),this.entities=new Map}exec(e,t){return e.hasChanged&&(this.entities=this.filterEntitiesByComponent(e)),void 0!==t?this.filterEntitiesByModifier(t):new Array(...this.entities.keys())}filterEntitiesByComponent(e){const t=new Map;for(let s of this.includeComponents){if(!e.components.has(s))continue;const n=e.components.get(s);for(let[e,s]of n.entries())t.set(e,s)}for(let s of this.excludeComponents){if(!e.components.has(s))continue;const n=e.components.get(s);for(let e of n.keys())t.delete(e)}return t}filterEntitiesByModifier(e){const t=new Array;for(let[s,n]of this.entities)n===e&&t.push(s);return t}}class a{entities;components;systems;hasChanged;deferredChanges;constructor(){this.entities=new Set,this.components=new Map,this.systems=new Map,this.hasChanged=!1,this.deferredChanges={added:{entities:new Set,components:new Map,systems:new Map},removed:{entities:new Set,components:new Map,systems:new Map}}}addEntity(e){this.deferredChanges.added.entities.add(e)}addComponent(e,t){if(!this.entities.has(e))return;const n=this.components.get(t)||new Map;n.set(e,s.ADDED),this.deferredChanges.added.components.set(t,n)}addSystem(e,t){this.deferredChanges.added.systems.set(e,e.onStart(this,t))}update(e,t){for(let s of this.systems.values())s?.(e,t);this.applyDeferredChanges(),this.clearDeferredChanges()}removeEntity(e){this.entities.has(e)&&this.deferredChanges.removed.entities.add(e)}removeComponent(e,t){if(!this.entities.has(e)||!this.components.has(t))return;const n=this.components.get(t);n.set(e,s.REMOVED),this.deferredChanges.removed.components.set(t,n)}removeSystem(e){if(!this.systems.has(e))return;const t=this.systems.get(e);this.deferredChanges.removed.systems.set(e,t)}destroy(){this.entities.clear(),this.components.clear(),this.systems.clear();for(let e of Object.keys(this.deferredChanges)){const{entities:t,components:s,systems:n}=this.deferredChanges[e];t.clear(),s.clear(),n.clear()}}applyDeferredChanges(){const{entities:e,components:t,systems:n}=this.deferredChanges.added,{entities:o,components:i,systems:r}=this.deferredChanges.removed;for(let t of e)this.entities.add(t),this.hasChanged=!0;for(let e of o)this.entities.delete(e),this.hasChanged=!0;for(let[e,n]of t.entries()){for(let t of n.keys()){if(!this.components.has(e))continue;this.components.get(e).get(t)===s.ADDED&&n.set(t,s.ACTIVE)}this.components.set(e,n),this.hasChanged=!0}for(let[e,t]of i.entries()){for(let n of t.keys()){if(!this.components.has(e))continue;this.components.get(e).get(n)===s.REMOVED&&t.delete(n)}this.components.set(e,t),this.hasChanged=!0}for(let[e,t]of n.entries())this.systems.set(e,t),this.hasChanged=!0;for(let e of r.keys())this.systems.delete(e),this.hasChanged=!0}clearDeferredChanges(){for(let e of Object.keys(this.deferredChanges)){const{entities:t,components:s,systems:n}=this.deferredChanges[e];t.clear(),s.clear(),n.clear()}}}class d{static ComponentType=t;static QueryModifier=s;static createWorld(){return new a}static createEntity(){return new e}static defineComponent(e){return new o(e)}static defineSystem(e){return new i(e)}static defineQuery(e){return new r(e)}static addEntity(e,t){for(let s of t)e.addEntity(s)}static addComponent(e,t,s){for(let n of t)for(let t of s)e.addComponent(n,t)}static addSystem(e,t,...s){for(let n of t)e.addSystem(n,s)}static update(e,t,s){e.update(t,s)}static removeEntity(e,t){for(let s of t)e.removeEntity(s)}static removeComponent(e,t,s){for(let n of t)for(let t of s)e.removeComponent(n,t)}static removeSystem(e,t){for(let s of t)e.removeSystem(s)}static destroyWorld(e){e.destroy()}}export{o as Component,n as Constants,e as Entity,r as Query,i as System,a as World,d as default};
